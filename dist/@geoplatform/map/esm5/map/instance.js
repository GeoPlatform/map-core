/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as jquery from "jquery";
/** @type {?} */
var jQuery = jquery;
import * as Q from "q";
import { circleMarker, geoJSON, featureGroup, LayerGroup } from 'leaflet';
import { Config, ItemTypes, ServiceFactory, JQueryHttpClient } from 'geoplatform.client';
import LayerFactory from '../layer/factory';
import DefaultBaseLayer from '../layer/baselayer-default';
var Listener = /** @class */ (function () {
    function Listener() {
        //listeners to be unregistered upon destroy
        this._listeners = {};
    }
    /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    Listener.prototype.on = /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    function (type, listener) {
        if (!this._listeners[type])
            this._listeners[type] = [];
        this._listeners[type].push(listener);
    };
    /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    Listener.prototype.off = /**
     * @param {?} type
     * @param {?} listener
     * @return {?}
     */
    function (type, listener) {
        if (!type)
            this._listeners = {};
        if (!this._listeners[type])
            return;
        if (!listener)
            this._listeners[type] = [];
        else {
            /** @type {?} */
            var idx = this._listeners[type].indexOf(listener);
            if (idx >= 0)
                this._listeners[type].splice(idx, 1);
        }
    };
    /**
     * @param {?} type
     * @param {...?} options
     * @return {?}
     */
    Listener.prototype.notify = /**
     * @param {?} type
     * @param {...?} options
     * @return {?}
     */
    function (type) {
        var options = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            options[_i - 1] = arguments[_i];
        }
        if (!this._listeners[type])
            return;
        /** @type {?} */
        var args = Array.prototype.slice.call(arguments, 1);
        this._listeners[type].forEach(function (l) { l.apply(null, args); });
    };
    return Listener;
}());
if (false) {
    /** @type {?} */
    Listener.prototype._listeners;
}
var MapInstance = /** @class */ (function (_super) {
    tslib_1.__extends(MapInstance, _super);
    function MapInstance(key) {
        var _this = _super.call(this) || this;
        _this.setHttpClient(new JQueryHttpClient());
        _this.setServiceFactory(ServiceFactory);
        //generate random key (see factory below)
        //generate random key (see factory below)
        _this._key = key || Math.ceil(Math.random() * 9999);
        //registry id of current map if available
        //registry id of current map if available
        _this._mapId = null,
            //definition of map (ie, from server)
            //definition of map (ie, from server)
            _this._mapDef = _this.initializeMapDefinition(),
            //primary map instance (ie, leaflet)
            //primary map instance (ie, leaflet)
            _this._mapInstance = null,
            //default map extent (if map doesn't have one for being saved)
            //default map extent (if map doesn't have one for being saved)
            _this._defaultExtent = null,
            //current base layer object and leaflet instance
            //current base layer object and leaflet instance
            _this._baseLayerDef = null,
            _this._baseLayer = null,
            //set definitions of layer states (including layer info) on map
            //set definitions of layer states (including layer info) on map
            _this._layerStates = [],
            //map layer def ids with leaflet instances
            //map layer def ids with leaflet instances
            _this._layerCache = {},
            //errors generated by layers loading
            //errors generated by layers loading
            _this._layerErrors = [],
            _this._layerErrorHandler = function (e) {
                console.log("MapInstance.defaultLayerErrorHandler() - " + e.id + " : " + e.message);
            },
            //layer used to store features on map
            //layer used to store features on map
            _this._featureLayer = null,
            _this._featureLayerVisible = true,
            //set of registered map tools
            //set of registered map tools
            _this._tools = [],
            //state management
            //state management
            _this.state = { dirty: false }; // jshint ignore:line
        _this._geoJsonLayerOpts = {
            style: function (feature) {
                if (feature.properties.style)
                    return feature.properties.style;
            },
            onEachFeature: function (feature, layer) {
                /** @type {?} */
                var style = { weight: 2, color: '#03f', opacity: 0.9, radius: 4, fillColor: '#03f', fillOpacity: 0.5 };
                if (~feature.geometry.type.indexOf('Point')) {
                    style.fillOpacity = 0.9;
                }
                /** @type {?} */
                var props = feature.properties = feature.properties || {};
                if (feature.properties.id === undefined || feature.properties.id === null)
                    feature.properties.id = Math.floor(Math.random() * 999999);
                feature.properties.label = props.label || props.title || props.name || "Untitled " + feature.geometry.type + " Feature";
                feature.properties.description = props.description || props.desc || "This feature needs a description!";
                feature.properties.style = props.style || style;
                layer.bindTooltip(props.label);
                /*
                                toggle: setLabelNoHide(bool)
                                it may only exist on markers!
                                */
            },
            pointToLayer: function (feature, latlng) {
                /** @type {?} */
                var style = feature.properties.style || {};
                style.radius = style.radius || 4;
                style.weight = style.weight || 2;
                style.color = style.color || '#03f';
                style.opacity = style.opacity || 0.9;
                style.fillOpacity = style.opacity;
                style.fillColor = style.color;
                return circleMarker(latlng, style);
            }
        };
        return _this;
    }
    /**
     * @return {?}
     */
    MapInstance.prototype.dispose = /**
     * @return {?}
     */
    function () {
        this.destroyMap();
        this.svcCache = null;
        this.serviceFactory = null;
        this.httpClient = null;
        this._key = null;
        this._mapId = null;
        this._mapDef = null;
        this._mapInstance = null;
        this._defaultExtent = null;
        this._baseLayerDef = null;
        this._baseLayer = null;
        this._layerStates = null;
        this._layerCache = null;
        this._layerErrors = null;
        this._featureLayer = null;
        this._featureLayerVisible = true;
        this._tools = null;
        this.state = null;
        this._geoJsonLayerOpts = null;
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.getKey = /**
     * @return {?}
     */
    function () {
        return this._key;
    };
    /**
     * Override default (JQuery-based) map service used by this instance
     * @param mapService - service to use to CRUD map objects
     * @deprecated use setServiceFactory instead
     */
    /**
     * Override default (JQuery-based) map service used by this instance
     * @deprecated use setServiceFactory instead
     * @param {?} mapService - service to use to CRUD map objects
     * @return {?}
     */
    MapInstance.prototype.setService = /**
     * Override default (JQuery-based) map service used by this instance
     * @deprecated use setServiceFactory instead
     * @param {?} mapService - service to use to CRUD map objects
     * @return {?}
     */
    function (mapService) {
        // this.mapService = mapService;
    };
    /**
     * @param factory - GeoPlatform ServiceFactory to instantiate services for maps and layers
     */
    /**
     * @param {?} factory - GeoPlatform ServiceFactory to instantiate services for maps and layers
     * @return {?}
     */
    MapInstance.prototype.setServiceFactory = /**
     * @param {?} factory - GeoPlatform ServiceFactory to instantiate services for maps and layers
     * @return {?}
     */
    function (factory) {
        this.svcCache = {}; //wipe out cached services
        this.serviceFactory = factory;
    };
    /**
     * @param httpClient - HttpClient impl to use with the new factory
     */
    /**
     * @param {?} httpClient - HttpClient impl to use with the new factory
     * @return {?}
     */
    MapInstance.prototype.setHttpClient = /**
     * @param {?} httpClient - HttpClient impl to use with the new factory
     * @return {?}
     */
    function (httpClient) {
        this.svcCache = {}; //wipe out cached services
        this.httpClient = httpClient;
    };
    /**
     * @param type - GeoPlatform Object model type to support ("Map", "Layer", etc)
     * @return item service implementation for the requested type
     */
    /**
     * @param {?} type - GeoPlatform Object model type to support ("Map", "Layer", etc)
     * @return {?} item service implementation for the requested type
     */
    MapInstance.prototype.getService = /**
     * @param {?} type - GeoPlatform Object model type to support ("Map", "Layer", etc)
     * @return {?} item service implementation for the requested type
     */
    function (type) {
        if (!this.svcCache[type])
            this.svcCache[type] = this.serviceFactory(type, Config.ualUrl, this.httpClient);
        return this.svcCache[type];
    };
    /**
     * @param fn - callback when an error is encountered
     */
    /**
     * @param {?} fn - callback when an error is encountered
     * @return {?}
     */
    MapInstance.prototype.setErrorHandler = /**
     * @param {?} fn - callback when an error is encountered
     * @return {?}
     */
    function (fn) {
        this._layerErrorHandler = fn;
    };
    //-----------------
    /**
     * @param {?} layerId
     * @return {?}
     */
    MapInstance.prototype.getLayerStateIndex = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        if (!layerId)
            return -1;
        for (var i = 0; i < this._layerStates.length; ++i) {
            if (this._layerStates[i].layer && layerId === this._layerStates[i].layer.id) {
                return i;
            }
        }
        return -1;
        // return this._layerStates.indexOfObj(layerId, (id, state) => state.layer.id === id );
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    MapInstance.prototype.getLayerState = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        /** @type {?} */
        var index = this.getLayerStateIndex(layerId);
        return index >= 0 ? this._layerStates[index] : null;
    };
    //-----------------
    /**
     * @return {?}
     */
    MapInstance.prototype.initializeMapDefinition = /**
     * @return {?}
     */
    function () {
        return {
            type: ItemTypes.MAP,
            title: "My New Map",
            label: "My New Map",
            description: "This map needs a description",
            createdBy: null,
            baseLayer: this._baseLayerDef,
            layers: [],
            keywords: [],
            themes: [],
            resourceTypes: ['http://www.geoplatform.gov/ont/openmap/GeoplatformMap']
        };
    };
    /**
     * @param metadata object
     * @return object definition of the current map suitable for sending to WMVR
     */
    /**
     * @param {?=} metadata object
     * @return {?} object definition of the current map suitable for sending to WMVR
     */
    MapInstance.prototype.getMapResourceContent = /**
     * @param {?=} metadata object
     * @return {?} object definition of the current map suitable for sending to WMVR
     */
    function (metadata) {
        metadata = metadata || {};
        //map layers
        metadata.layers = this._layerStates.slice(0);
        // ... UAL should support accepting just an id here, so we'll do just that
        metadata.baseLayer = this._baseLayerDef;
        metadata.annotations = this._featureLayer ?
            { title: "Map Features", geoJSON: this._featureLayer.toGeoJSON() } : null;
        /** @type {?} */
        var extent = this._mapInstance.getBounds();
        metadata.extent = {
            minx: extent.getWest(),
            miny: extent.getSouth(),
            maxx: extent.getEast(),
            maxy: extent.getNorth()
        };
        return metadata;
    };
    /**
     * @return Leaflet toolbar
     */
    /**
     * @return {?} Leaflet toolbar
     */
    MapInstance.prototype.getDrawControlToolbar = /**
     * @return {?} Leaflet toolbar
     */
    function () {
        if (!(/** @type {?} */ (this._mapInstance)).drawControl)
            return null;
        /** @type {?} */
        var toolbars = (/** @type {?} */ (this._mapInstance)).drawControl._toolbars;
        /** @type {?} */
        var toolbar = null;
        for (var key in toolbars) {
            if (toolbars.hasOwnProperty(key)) {
                if (toolbars[key]._modes) {
                    toolbar = toolbars[key];
                    break;
                }
            }
        }
        return toolbar;
    };
    /**
     * @param error Leaflet tile load error (.target is layer, .tile is image)
     */
    /**
     * @param {?} error Leaflet tile load error (.target is layer, .tile is image)
     * @return {?}
     */
    MapInstance.prototype.handleLayerError = /**
     * @param {?} error Leaflet tile load error (.target is layer, .tile is image)
     * @return {?}
     */
    function (error) {
        // console.log("MapInstance.handleLayerError() - " +
        //     "Layer's tile failed to load: " + error.tile.src);
        if (!this._layerCache) {
            console.log("Unable to find layer in layer cache. Layer error is " + error);
            return;
        }
        /** @type {?} */
        var layer = error.target;
        for (var id in this._layerCache) {
            if (this._layerCache[id] === layer) {
                this.processLayerError(error, id);
                break;
            }
        }
    };
    /**
     * Given a Leaflet tile load error and the responsible layer id,
     * Try to isolate the cause of the error using the proxy
     * and notify listeners that an error has occurred
     */
    /**
     * Given a Leaflet tile load error and the responsible layer id,
     * Try to isolate the cause of the error using the proxy
     * and notify listeners that an error has occurred
     * @param {?} error
     * @param {?} id
     * @return {?}
     */
    MapInstance.prototype.processLayerError = /**
     * Given a Leaflet tile load error and the responsible layer id,
     * Try to isolate the cause of the error using the proxy
     * and notify listeners that an error has occurred
     * @param {?} error
     * @param {?} id
     * @return {?}
     */
    function (error, id) {
        var _this = this;
        /** @type {?} */
        var finder = function (l) { return l.id === id || (l.layer && l.layer.id === id); };
        if (!this._layerErrors.find(finder)) {
            /** @type {?} */
            var obj_1 = this.logLayerError(id, "Layer ('" + id + "') failed to completely load. " +
                "It may be inaccessible or misconfigured.");
            /** @type {?} */
            var url = (/** @type {?} */ (error)).tile.src;
            /** @type {?} */
            var params = { id: id };
            url.substring(url.indexOf("?") + 1, url.length).split('&').forEach(function (param) {
                /** @type {?} */
                var p = param.split('=');
                params[p[0]] = p[1];
            });
            /** @type {?} */
            var layerService = this.getService(ItemTypes.LAYER);
            if (layerService) {
                layerService.validate(id, params)
                    .catch(function (e) {
                    /** @type {?} */
                    var def = _this._layerStates.find(finder);
                    if (def) {
                        obj_1.message = "Layer '" + def.layer.label + "' failed to completely load. " +
                            "Reported cause: " + e.message;
                    }
                    _this.notify('layer:error', obj_1);
                });
            }
        }
    };
    /**
     * @param layerId - identifier of layer generating the error
     * @param errorMsg - message of the error
     */
    /**
     * @param {?} layerId - identifier of layer generating the error
     * @param {?} errorMsg - message of the error
     * @return {?}
     */
    MapInstance.prototype.logLayerError = /**
     * @param {?} layerId - identifier of layer generating the error
     * @param {?} errorMsg - message of the error
     * @return {?}
     */
    function (layerId, errorMsg) {
        /** @type {?} */
        var err = { id: layerId, message: errorMsg };
        this._layerErrors.push(err);
        if (this._layerErrorHandler) {
            this._layerErrorHandler(err);
        }
        return err;
    };
    /* -- State Management of internal model -- */
    /**
     * @param {?=} event
     * @param {...?} options
     * @return {?}
     */
    MapInstance.prototype.touch = /**
     * @param {?=} event
     * @param {...?} options
     * @return {?}
     */
    function (event) {
        var options = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            options[_i - 1] = arguments[_i];
        }
        this.state.dirty = true;
        if (event) {
            if (arguments.length > 1) {
                this.notify.apply(this, Array.prototype.slice.call(arguments));
            }
            else
                this.notify(event);
            // console.log("Dirtying map for " + event);
        }
        // else console.log("Dirtying map");
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.clean = /**
     * @return {?}
     */
    function () {
        // console.log("Cleaning map");
        this.state.dirty = false;
    };
    /* --------------------------------------- */
    /* ==============================================
        Map manipulation operations
       ============================================== */
    /**
     * @param {?} map
     * @return {?}
     */
    MapInstance.prototype.setMap = /**
     * @param {?} map
     * @return {?}
     */
    function (map) { this._mapInstance = map; };
    /**
     * @return  map instance
     */
    /**
     * @return {?} map instance
     */
    MapInstance.prototype.getMap = /**
     * @return {?} map instance
     */
    function () { return this._mapInstance; };
    /** @return definition of map */
    /**
     * @return {?} definition of map
     */
    MapInstance.prototype.getMapDefinition = /**
     * @return {?} definition of map
     */
    function () { return this._mapDef; };
    /** @return identifier of map */
    /**
     * @return {?} identifier of map
     */
    MapInstance.prototype.getMapId = /**
     * @return {?} identifier of map
     */
    function () { return this._mapId; };
    /**
     * Focuses the map on the specified lat/lng coordinate
     * @param lat number
     * @param lng number
     * @param zoom number (optional)
     */
    /**
     * Focuses the map on the specified lat/lng coordinate
     * @param {?} lat number
     * @param {?} lng number
     * @param {?=} zoom number (optional)
     * @return {?}
     */
    MapInstance.prototype.setView = /**
     * Focuses the map on the specified lat/lng coordinate
     * @param {?} lat number
     * @param {?} lng number
     * @param {?=} zoom number (optional)
     * @return {?}
     */
    function (lat, lng, zoom) {
        /** @type {?} */
        var z = zoom;
        if (typeof (z) === 'undefined')
            z = this._mapInstance.getZoom();
        this._mapInstance.setView([lat, lng], z);
        this.touch('map:view:changed');
    };
    /**
     * Retrieve the current center of the map
     * @return [lat,lng]
     */
    /**
     * Retrieve the current center of the map
     * @return {?} [lat,lng]
     */
    MapInstance.prototype.getView = /**
     * Retrieve the current center of the map
     * @return {?} [lat,lng]
     */
    function () {
        /** @type {?} */
        var latLng = this._mapInstance.getCenter();
        return [latLng.lat, latLng.lng];
    };
    /**
     * @return integer current zoom level of the map
     */
    /**
     * @return {?} integer current zoom level of the map
     */
    MapInstance.prototype.getZoom = /**
     * @return {?} integer current zoom level of the map
     */
    function () {
        return this._mapInstance.getZoom();
    };
    /**
     * Zoom to the map's default extent
     * If the map is saved, this will be the saved viewport
     * otherwise, it will be CONUS
     */
    /**
     * Zoom to the map's default extent
     * If the map is saved, this will be the saved viewport
     * otherwise, it will be CONUS
     * @return {?}
     */
    MapInstance.prototype.zoomToDefault = /**
     * Zoom to the map's default extent
     * If the map is saved, this will be the saved viewport
     * otherwise, it will be CONUS
     * @return {?}
     */
    function () {
        if (!this._mapInstance)
            return;
        if (this._defaultExtent) {
            this._mapInstance.fitBounds([
                [this._defaultExtent.miny, this._defaultExtent.minx],
                [this._defaultExtent.maxy, this._defaultExtent.maxx]
            ]);
        }
        else {
            console.log("MapInstance.zoomToDefault() - No default extent specified");
            this._mapInstance.setView([38, -96], 5);
        }
        try {
            this.touch('map:view:changed');
        }
        catch (e) { }
    };
    /**
     * @param extent - either a GP extent object or Leaflet LatLngBounds object
     */
    /**
     * @param {?} extent - either a GP extent object or Leaflet LatLngBounds object
     * @return {?}
     */
    MapInstance.prototype.setExtent = /**
     * @param {?} extent - either a GP extent object or Leaflet LatLngBounds object
     * @return {?}
     */
    function (extent) {
        if (!extent)
            return;
        if (typeof (extent.minx) !== 'undefined' &&
            typeof (extent.miny) !== 'undefined' &&
            typeof (extent.maxx) !== 'undefined' &&
            typeof (extent.maxy) !== 'undefined') {
            //GP model extent
            this._mapInstance.fitBounds([
                [extent.miny, extent.minx],
                [extent.maxy, extent.maxx]
            ]);
        }
        else if (typeof (extent.getWest) !== 'undefined') {
            //L.LatLngBounds
            this._mapInstance.fitBounds(extent);
        }
        else {
        }
    };
    /* ==============================================
        Layer operations
       ============================================== */
    /**
     * @param layer Leaflet Layer instance or object definition
     */
    /**
     * @param {?} layer Leaflet Layer instance or object definition
     * @return {?}
     */
    MapInstance.prototype.setBaseLayer = /**
     * @param {?} layer Leaflet Layer instance or object definition
     * @return {?}
     */
    function (layer) {
        var _this = this;
        /** @type {?} */
        var promise = null;
        if (!layer) {
            promise = DefaultBaseLayer.get(this.getService(ItemTypes.LAYER));
        }
        else
            promise = Q.resolve(layer);
        promise.then(function (layer) {
            /** @type {?} */
            var leafletLayer = LayerFactory.create(layer);
            if (!leafletLayer) {
                console.log("Warning: MapInstance could not create base " +
                    "layer for '" + layer.id + "'");
                return;
            }
            _this._mapInstance.addLayer(leafletLayer);
            (/** @type {?} */ (leafletLayer)).setZIndex(0);
            /** @type {?} */
            var oldBaseLayer = _this._baseLayer;
            if (oldBaseLayer) {
                _this._mapInstance.removeLayer(oldBaseLayer);
            }
            //remember new base layer
            //remember new base layer
            _this._baseLayer = leafletLayer;
            _this._baseLayerDef = layer;
            //will notify listeners
            //will notify listeners
            _this.touch('baselayer:changed', layer, leafletLayer);
            // this.notify('baselayer:changed', layer, leafletLayer);
        })
            .catch(function (e) {
            console.log("MapInstance.setBaseLayer() - Error getting base layer for map : " + e.message);
            _this.logLayerError(layer.id, "Error setting baselayer on map " +
                "because of the following error(s): " + e.message);
        });
    };
    /**
     * @return array of base layers definitions that can be used
     */
    // getBaseLayerOptions () {
    //     return this._baseLayerOptions;
    // },
    /**
     * @return {?} array of base layers definitions that can be used
     */
    MapInstance.prototype.getBaseLayer = /**
     * @return {?} array of base layers definitions that can be used
     */
    function () { return this._baseLayerDef; };
    /**
     * @return list of layer states containing layer information
     */
    /**
     * @return {?} list of layer states containing layer information
     */
    MapInstance.prototype.getLayers = /**
     * @return {?} list of layer states containing layer information
     */
    function () { return this._layerStates; };
    /**
     * @return {?}
     */
    MapInstance.prototype.getLayerErrors = /**
     * @return {?}
     */
    function () { return this._layerErrors; };
    /**
     * @return {?}
     */
    MapInstance.prototype.clearLayerErrors = /**
     * @return {?}
     */
    function () {
        this._layerErrors = [];
        this.notify('layer:error');
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.clearOverlays = /**
     * @return {?}
     */
    function () {
        if (!this._layerCache)
            return;
        for (var i = this._layerStates.length - 1; i >= 0; --i) {
            /** @type {?} */
            var state = this._layerStates[i];
            /** @type {?} */
            var layerInstance = this._layerCache[state.layer.id];
            if (layerInstance) {
                layerInstance.off("layer:error");
                this._layerCache[state.layer.id] = null;
                this._mapInstance.removeLayer(layerInstance);
            }
        }
        this._layerStates = [];
        this.touch('layers:changed');
        //TODO stop listening for layer events
    };
    /**
     * @param layers - list of layers (NOTE: not wrapped by layer states, this method applies that)
     */
    /**
     * @param {?} layers - list of layers (NOTE: not wrapped by layer states, this method applies that)
     * @return {?}
     */
    MapInstance.prototype.addLayers = /**
     * @param {?} layers - list of layers (NOTE: not wrapped by layer states, this method applies that)
     * @return {?}
     */
    function (layers) {
        var _this = this;
        if (!this._layerCache) {
            console.log("WARN: attempting to add layers to an empty cache");
            return;
        }
        if (!this._layerCache) {
            console.log("WARN: Attempting to add layers to a map with no layer cache");
            return;
        }
        if (!layers)
            return;
        if (typeof (layers.push) === 'undefined') {
            layers = [layers];
        }
        layers.forEach(function (obj, index) {
            /** @type {?} */
            var layer = null;
            /** @type {?} */
            var state = null;
            if (obj.type && obj.type === ItemTypes.LAYER) { //is a layer
                //is a layer
                layer = obj;
            }
            else if (obj.layer) { //is layer state
                //is layer state
                layer = obj.layer; // containing a layer
                state = obj;
            }
            if (!layer) {
                console.log("MapInstance.addLayers() - layer (" + index +
                    ") is not a Layer or a Layer state. Ignoring...");
                return; //layer info is missing, skip it
            }
            //DT-442 prevent adding layer that already exists on map
            if (_this._layerCache[layer.id])
                return;
            if (!state) {
                try {
                    /** @type {?} */
                    var layerCopy = JSON.parse(JSON.stringify(layer));
                    state = {
                        opacity: 1,
                        visibility: true,
                        layer: layerCopy
                    };
                }
                catch (e) {
                    throw new Error("Unable to add layer to map because of " + e.message);
                }
            }
            /** @type {?} */
            var z = layers.length - index;
            state.zIndex = z;
            _this.addLayerWithState(layer, state);
        });
        this.touch('layers:changed');
    };
    /**
     * @param layer - GeoPlatform Layer instance
     * @param state - GeoPlatform Layer State
     */
    /**
     * @param {?} layer - GeoPlatform Layer instance
     * @param {?} state - GeoPlatform Layer State
     * @return {?}
     */
    MapInstance.prototype.addLayerWithState = /**
     * @param {?} layer - GeoPlatform Layer instance
     * @param {?} state - GeoPlatform Layer State
     * @return {?}
     */
    function (layer, state) {
        var _this = this;
        /** @type {?} */
        var leafletLayer = null;
        try {
            if (!layer || !state)
                throw new Error("Invalid argument, missing layer and or state");
            leafletLayer = LayerFactory.create(layer);
            if (!leafletLayer) {
                throw new Error("Could not create leaflet layer for GP Layer '" +
                    layer.id + "'");
            }
        }
        catch (e) {
            this.logLayerError(layer.id, "Layer '" + layer.label + "' could not be added to the " +
                "map instance; " + e.message);
        }
        if (!leafletLayer)
            return;
        //cache leaflet object first
        if (this._layerCache)
            this._layerCache[layer.id] = leafletLayer;
        //listen for layer errors so we can inform the user
        // that a layer hasn't been loaded in a useful way
        leafletLayer.on('tileerror', function (e) { _this.handleLayerError(e); });
        this._mapInstance.addLayer(leafletLayer);
        if (!isNaN(state.zIndex) && leafletLayer.setZIndex)
            leafletLayer.setZIndex(state.zIndex);
        this._layerStates.push(state);
        this.notify('layer:added', layer, leafletLayer);
        // if layer is initially "off" or...
        // if layer is initially not 100% opaque
        if (!state.visibility || state.opacity < 1) {
            // initialize layer visibility and opacity async, or else
            // some of the layers won't get properly initialized
            setTimeout(function (layer, state) {
                _this.setLayerVisibility(layer, state.visibility);
                _this.setLayerOpacity(layer, state.opacity);
                //TODO notify of change
                //DT-2102 timeout needs to be large enough or else
                // feature layers won't get opacity updated on map load
            }, 2000, leafletLayer, state);
        }
    };
    /**
     * @param from - position of layer being moved
     * @param to - desired position to move layer to
     */
    /**
     * @param {?} from - position of layer being moved
     * @param {?} to - desired position to move layer to
     * @return {?}
     */
    MapInstance.prototype.moveLayer = /**
     * @param {?} from - position of layer being moved
     * @param {?} to - desired position to move layer to
     * @return {?}
     */
    function (from, to) {
        if (!this._layerCache)
            return;
        if (!this._layerCache)
            return;
        if (isNaN(from))
            return;
        //end of list
        if (isNaN(to))
            to = this._layerStates.length - 1;
        /** @type {?} */
        var copy = this._layerStates.splice(from, 1)[0]; //grab layer being moved
        this._layerStates.splice(to, 0, copy);
        for (var z = 1, i = this._layerStates.length - 1; i >= 0; --i, ++z) {
            /** @type {?} */
            var layerState = this._layerStates[i];
            /** @type {?} */
            var layerInstance = this._layerCache[layerState.layer.id];
            if (layerInstance) {
                layerInstance.setZIndex(z);
                layerState.zIndex = z;
            }
        }
        this.touch('layers:changed', this.getLayers());
    };
    /**
     *
     */
    /**
     *
     * @param {?} id
     * @return {?}
     */
    MapInstance.prototype.removeLayer = /**
     *
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (!this._layerCache)
            return;
        /** @type {?} */
        var layerInstance = this._layerCache[id];
        if (layerInstance) {
            /** @type {?} */
            var index = this.getLayerStateIndex(id);
            // console.log("MapInstance.removeLayer(" + id + ")");
            if (index >= 0 && index < this._layerStates.length)
                this._layerStates.splice(index, 1);
            //stop listening for errors
            layerInstance.off("layer:error");
            //remove layer from map
            this._mapInstance.removeLayer(layerInstance);
            //remove layer from cache
            this._layerCache[id] = null;
        }
        this.touch('layers:changed');
    };
    /**
     *
     */
    /**
     *
     * @param {?} id
     * @return {?}
     */
    MapInstance.prototype.toggleLayerVisibility = /**
     *
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (!this._layerCache)
            return;
        /** @type {?} */
        var layerInstance = this._layerCache[id];
        if (layerInstance) {
            /** @type {?} */
            var state = this.getLayerState(id);
            state.visibility = !state.visibility;
            if (layerInstance._currentImage) {
                //ESRI Image Service layers have an IMG element
                // that gets modified and replaced every map event (zoom/pan)
                // so we can't just toggle classes like on other layers.
                //Instead, we need to use the ESRI setOpacity method to toggle
                // but need to update layer state as well.
                layerInstance.setOpacity(state.visibility ? 1 : 0);
                state.opacity = layerInstance.getOpacity();
                return;
            }
            this.setLayerVisibility(layerInstance, state.visibility);
        }
    };
    /**
     * Note: this does not update layer definition state. Use
     * MapInstance.toggleLayerVisibility to do that and adjust
     * rendered layer's visibility.
     *
     * @param layerInstance - leaflet layer instance
     * @param visible - flag indicating visibility of layer
     */
    /**
     * Note: this does not update layer definition state. Use
     * MapInstance.toggleLayerVisibility to do that and adjust
     * rendered layer's visibility.
     *
     * @param {?} layerInstance - leaflet layer instance
     * @param {?} visible - flag indicating visibility of layer
     * @return {?}
     */
    MapInstance.prototype.setLayerVisibility = /**
     * Note: this does not update layer definition state. Use
     * MapInstance.toggleLayerVisibility to do that and adjust
     * rendered layer's visibility.
     *
     * @param {?} layerInstance - leaflet layer instance
     * @param {?} visible - flag indicating visibility of layer
     * @return {?}
     */
    function (layerInstance, visible) {
        if ((/** @type {?} */ (layerInstance)).setVisibility) {
            //using custom method provided in src/layer/module.js
            (/** @type {?} */ (layerInstance)).setVisibility(visible);
        }
        else if ((/** @type {?} */ (layerInstance))._container) {
            /** @type {?} */
            var el = jQuery((/** @type {?} */ (layerInstance))._container);
            // if(visible) el.removeClass("invisible");
            // else el.addClass('invisible');
            el.css({ 'display': visible ? '' : 'none' });
        }
        this.touch('map:layer:changed');
    };
    /**
     *
     */
    /**
     *
     * @param {?} id
     * @param {?} opacity
     * @return {?}
     */
    MapInstance.prototype.updateLayerOpacity = /**
     *
     * @param {?} id
     * @param {?} opacity
     * @return {?}
     */
    function (id, opacity) {
        if (!this._layerCache)
            return;
        /** @type {?} */
        var layerInstance = this._layerCache[id];
        //if layer id is for base layer...
        if (!layerInstance && this._baseLayerDef.id === id) {
            layerInstance = this._baseLayer;
        }
        //adjust rendered leaflet layer
        opacity = this.setLayerOpacity(layerInstance, opacity);
        /** @type {?} */
        var state = this.getLayerState(id);
        if (state)
            state.opacity = opacity;
    };
    /**
     * Note: this method does not update the associated Layer Definition
     * state value for opacity. Use MapInstance.updateLayerOpacity() to
     * both update state and adjust rendered layer.
     *
     * @param layerInstance - leaflet layer instance
     * @param opacity - value between 0 and 1.0 or 0 and 100
     * @return normalized opacity value between 0 and 1.0
     */
    /**
     * Note: this method does not update the associated Layer Definition
     * state value for opacity. Use MapInstance.updateLayerOpacity() to
     * both update state and adjust rendered layer.
     *
     * @param {?} layerInstance - leaflet layer instance
     * @param {?} opacity - value between 0 and 1.0 or 0 and 100
     * @return {?} normalized opacity value between 0 and 1.0
     */
    MapInstance.prototype.setLayerOpacity = /**
     * Note: this method does not update the associated Layer Definition
     * state value for opacity. Use MapInstance.updateLayerOpacity() to
     * both update state and adjust rendered layer.
     *
     * @param {?} layerInstance - leaflet layer instance
     * @param {?} opacity - value between 0 and 1.0 or 0 and 100
     * @return {?} normalized opacity value between 0 and 1.0
     */
    function (layerInstance, opacity) {
        if (layerInstance && (/** @type {?} */ (layerInstance)).setOpacity) {
            if (opacity > 1.0)
                opacity = opacity / 100.0;
            (/** @type {?} */ (layerInstance)).setOpacity(opacity);
            this.touch('map:layer:changed');
        }
        return opacity;
    };
    /**
     * @param GeoPlatform Layer instance
     * @return Leaflet layer instance representing that layer or null
     */
    /**
     * @param {?} gpLayer
     * @return {?} Leaflet layer instance representing that layer or null
     */
    MapInstance.prototype.getLeafletLayerFor = /**
     * @param {?} gpLayer
     * @return {?} Leaflet layer instance representing that layer or null
     */
    function (gpLayer) {
        if (!gpLayer || !this._layerCache)
            return null;
        /** @type {?} */
        var leafletLayer = this._layerCache[gpLayer.id];
        return leafletLayer || null;
    };
    /**
     *
     */
    /**
     *
     * @param {?} layerId
     * @return {?}
     */
    MapInstance.prototype.toggleGetFeatureInfo = /**
     *
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        if (!this._layerCache)
            return;
        /** @type {?} */
        var layerInstance = this._layerCache[layerId];
        if (layerInstance) {
            if (typeof (layerInstance.enableGetFeatureInfo) !== 'undefined') {
                if (layerInstance.isGetFeatureInfoEnabled()) {
                    layerInstance.disableGetFeatureInfo();
                    jQuery((/** @type {?} */ (this._mapInstance))._container).removeClass('selectable-cursor');
                }
                else {
                    layerInstance.enableGetFeatureInfo();
                    jQuery((/** @type {?} */ (this._mapInstance))._container).addClass('selectable-cursor');
                }
            }
        }
    };
    /* ==============================================
       Feature operations
       ============================================== */
    /**
     * @return array of features on the map
     */
    /**
     * @return {?} array of features on the map
     */
    MapInstance.prototype.getFeatures = /**
     * @return {?} array of features on the map
     */
    function () {
        if (this._featureLayer) {
            /** @type {?} */
            var geojson_1 = this._featureLayer.toGeoJSON();
            return (/** @type {?} */ (geojson_1)).features;
        }
        return [];
    };
    /**
     * @param json geojson object or array of geojson objects
     */
    /**
     * @param {?} json geojson object or array of geojson objects
     * @return {?}
     */
    MapInstance.prototype.addFeatures = /**
     * @param {?} json geojson object or array of geojson objects
     * @return {?}
     */
    function (json) {
        if (!json)
            return;
        if (typeof (json.push) !== 'undefined') {
            //array of features
            for (var i = 0; i < json.length; ++i)
                this.addFeature(json[i], false);
            this.touch('features:changed');
        }
        else if (json.features) {
            this.addFeatures(json.features);
        }
        else { //single feature
            //single feature
            this.addFeature(json, true);
        }
    };
    /**
     * @param json geojson object
     */
    /**
     * @param {?} json geojson object
     * @param {?=} fireEvent
     * @return {?}
     */
    MapInstance.prototype.addFeature = /**
     * @param {?} json geojson object
     * @param {?=} fireEvent
     * @return {?}
     */
    function (json, fireEvent) {
        var _this = this;
        // var type = json.type;
        // var coordinates = json.coordinates;
        if (!this._featureLayer) {
            // _featureLayer = geoJSON([], _geoJsonLayerOpts).addTo(_mapInstance);
            this._featureLayer = featureGroup().addTo(this._mapInstance);
        }
        /** @type {?} */
        var opts = jQuery.extend({}, this._geoJsonLayerOpts);
        geoJSON(json, opts).eachLayer(function (l) { return _this.addFeatureLayer(l); });
        if (typeof (fireEvent) === 'undefined' || fireEvent === true)
            this.touch('features:changed');
        else
            this.touch();
        // console.log(JSON.stringify(_featureLayer.toGeoJSON()));
    };
    /**
     * @param featureJson object defining a GeoJSON feature
     */
    /**
     * @param {?} featureJson object defining a GeoJSON feature
     * @return {?}
     */
    MapInstance.prototype.updateFeature = /**
     * @param {?} featureJson object defining a GeoJSON feature
     * @return {?}
     */
    function (featureJson) {
        /** @type {?} */
        var layer = this.getFeatureLayer(featureJson.properties.id);
        if (layer) {
            (/** @type {?} */ (layer)).feature = featureJson;
            //update style
            layer.setStyle(featureJson.properties.style);
            /** @type {?} */
            var label = featureJson.properties.label ||
                "Untitled " + featureJson.geometry.type + " Feature";
            layer.bindTooltip(label);
            // layer.redraw();
            this.touch("map:feature:changed");
        }
    };
    /**
     * Replace an existing L.Path-based layer with one using
     * the supplied Feature GeoJSON object.  Removes the existing
     * layer and adds a new one created from the GeoJSON.
     *
     * @param featureJson object defining GeoJSON feature
     */
    /**
     * Replace an existing L.Path-based layer with one using
     * the supplied Feature GeoJSON object.  Removes the existing
     * layer and adds a new one created from the GeoJSON.
     *
     * @param {?} featureJson object defining GeoJSON feature
     * @return {?}
     */
    MapInstance.prototype.replaceFeature = /**
     * Replace an existing L.Path-based layer with one using
     * the supplied Feature GeoJSON object.  Removes the existing
     * layer and adds a new one created from the GeoJSON.
     *
     * @param {?} featureJson object defining GeoJSON feature
     * @return {?}
     */
    function (featureJson) {
        var _this = this;
        /** @type {?} */
        var layer = this.getFeatureLayer(featureJson.properties.id);
        if (layer) {
            //remove existing
            this._featureLayer.removeLayer(layer);
            //add replacement
            geoJSON(featureJson, this._geoJsonLayerOpts)
                .eachLayer(function (l) { return _this.addFeatureLayer(l); });
            this.touch("map:feature:changed");
        }
    };
    /**
     * @param featureId identifier of feature to focus the map on
     */
    /**
     * @param {?} featureId identifier of feature to focus the map on
     * @return {?}
     */
    MapInstance.prototype.focusFeature = /**
     * @param {?} featureId identifier of feature to focus the map on
     * @return {?}
     */
    function (featureId) {
        /** @type {?} */
        var layer = this.getFeatureLayer(featureId);
        if (layer) {
            if (typeof (layer.getBounds) !== 'undefined') {
                /** @type {?} */
                var extent = layer.getBounds();
                this._mapInstance.fitBounds(extent);
            }
            else if (typeof ((/** @type {?} */ (layer)).getLatLng) !== 'undefined') {
                /** @type {?} */
                var latLng = (/** @type {?} */ (layer)).getLatLng();
                this._mapInstance.panTo(latLng);
            }
            else {
                console.log("MapInstance.focusFeature() - Cannot focus feature because it has no bounds or lat/lng");
            }
        }
        else {
            console.log("MapInstance.focusFeature() - Cannot focus feature because it has no layer");
        }
    };
    /**
     * @param featureId : string
     */
    /**
     * @param {?} featureId : string
     * @return {?}
     */
    MapInstance.prototype.removeFeature = /**
     * @param {?} featureId : string
     * @return {?}
     */
    function (featureId) {
        /** @type {?} */
        var layer = this.getFeatureLayer(featureId);
        if (layer && this._featureLayer) {
            this._featureLayer.removeLayer(layer);
            this.touch('features:changed');
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    MapInstance.prototype.removeFeatures = /**
     *
     * @return {?}
     */
    function () {
        if (this._featureLayer) {
            this._featureLayer.clearLayers();
            this.touch("features:changed");
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?=} featureId
     * @return {?}
     */
    MapInstance.prototype.getFeatureLayer = /**
     *
     * @param {?=} featureId
     * @return {?}
     */
    function (featureId) {
        //if no feature was specified, return root feature layer
        if (!featureId)
            return this._featureLayer;
        //otherwise, find feature...
        if (!this._featureLayer)
            return null;
        /** @type {?} */
        var features = this._featureLayer.getLayers();
        for (var i = 0; i < features.length; ++i) {
            if ((/** @type {?} */ (features[i])).feature &&
                (/** @type {?} */ (features[i])).feature.properties.id === featureId) {
                return (/** @type {?} */ (features[i]));
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.toggleFeaturesLayer = /**
     * @return {?}
     */
    function () {
        if (!this._featureLayer)
            return false; //ignore if not rendered yet
        this._featureLayerVisible = !this._featureLayerVisible;
        this.setFeatureLayerVisibility(this._featureLayer, this._featureLayerVisible);
        return this._featureLayerVisible;
    };
    /**
     * @param  feature - Leaflet feature instance
     * @param  visibility - flag
     */
    /**
     * @param {?} feature - Leaflet feature instance
     * @param {?} visibility - flag
     * @return {?}
     */
    MapInstance.prototype.setFeatureVisibility = /**
     * @param {?} feature - Leaflet feature instance
     * @param {?} visibility - flag
     * @return {?}
     */
    function (feature, visibility) {
        this.setFeatureLayerVisibility(feature, visibility);
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.getFeaturesLayerVisibility = /**
     * @return {?}
     */
    function () {
        return this._featureLayerVisible;
    };
    /*
     * method for adding feature layers to the map
     * when these layers may be layer groups.
     * finds leaf node layers and adds them to the
     * map's feature group
     */
    /**
     * @param {?} layer
     * @return {?}
     */
    MapInstance.prototype.addFeatureLayer = /**
     * @param {?} layer
     * @return {?}
     */
    function (layer) {
        this._addFeatureLayer(layer);
        this.touch("features:changed");
    };
    /**
     * Internal method, use 'addFeatureLayer' instead
     * @param layer
     */
    /**
     * Internal method, use 'addFeatureLayer' instead
     * @param {?} layer
     * @return {?}
     */
    MapInstance.prototype._addFeatureLayer = /**
     * Internal method, use 'addFeatureLayer' instead
     * @param {?} layer
     * @return {?}
     */
    function (layer) {
        var _this = this;
        if (!(/** @type {?} */ (layer)).feature && layer instanceof LayerGroup) {
            layer.eachLayer(function (child) {
                _this._addFeatureLayer(child);
            });
        }
        else {
            this._featureLayer.addLayer(layer);
        }
    };
    //toggle visibility of parent feature layer
    /**
     * @param {?} layer
     * @param {?} visibility
     * @return {?}
     */
    MapInstance.prototype.setFeatureLayerVisibility = /**
     * @param {?} layer
     * @param {?} visibility
     * @return {?}
     */
    function (layer, visibility) {
        var _this = this;
        if (!layer)
            return;
        this._featureLayerVisible = visibility;
        if (layer.getLayers) {
            layer.getLayers().forEach(function (child) {
                _this.setFeatureLayerVisibility(child, visibility);
            });
        }
        else {
            /** @type {?} */
            var container = layer._container || layer._path;
            if (container)
                container.style.display = visibility ? '' : 'none';
        }
    };
    /* ==============================================
       Map lifecycle operations
       ============================================== */
    /**
     * @param metadata
     * @return resolving persisted map
     */
    /**
     * @param {?} metadata
     * @return {?} resolving persisted map
     */
    MapInstance.prototype.save = /**
     * @param {?} metadata
     * @return {?} resolving persisted map
     */
    function (metadata) {
        return this.saveMap(metadata);
    };
    /**
     * @param md object containing metadata properties for map
     */
    /**
     * @param {?} md object containing metadata properties for map
     * @return {?}
     */
    MapInstance.prototype.saveMap = /**
     * @param {?} md object containing metadata properties for map
     * @return {?}
     */
    function (md) {
        var _this = this;
        /** @type {?} */
        var metadata = md || {};
        /** @type {?} */
        var gpMapType = 'http://www.geoplatform.gov/ont/openmap/GeoplatformMap';
        metadata.resourceTypes = metadata.resourceTypes || [];
        if (metadata.resourceTypes.indexOf(gpMapType) < 0)
            metadata.resourceTypes.push(gpMapType);
        /** @type {?} */
        var content = this.getMapResourceContent(metadata);
        //ensure the two name properties line up
        if (content.title && content.title !== content.label) {
            content.label = content.title;
        }
        else if (content.label && !content.title) {
            content.title = content.label;
        }
        // console.log("Updating: " + JSON.stringify(map));
        return this.getService(ItemTypes.MAP)
            .save(content)
            .then(function (result) {
            //track new map's info so we can update it with next save
            if (!_this._mapId)
                _this._mapId = result.id;
            _this._mapDef = result;
            _this._defaultExtent = result.extent;
            _this.clean();
            return result;
        })
            .catch(function (err) {
            console.log("MapCore MapInstance.saveMap() - " +
                "The requested map could not be saved because: " + err.message);
            /** @type {?} */
            var e = new Error("The requested map could not be saved because of the following error(s): " +
                err.message);
            return Q.reject(e);
        });
    };
    /**
     * Retrieve a map's descriptor from the registry
     * @param mapId identifier of map
     * @return resolving the map object
     */
    /**
     * Retrieve a map's descriptor from the registry
     * @param {?} mapId identifier of map
     * @return {?} resolving the map object
     */
    MapInstance.prototype.fetchMap = /**
     * Retrieve a map's descriptor from the registry
     * @param {?} mapId identifier of map
     * @return {?} resolving the map object
     */
    function (mapId) {
        //Having to send cache busting parameter to avoid CORS header cache
        // not sending correct Origin value
        return this.getService(ItemTypes.MAP).get(mapId);
    };
    /**
     * Retrieve a map's descriptor and load it as the
     * current map managed by this service
     * @param mapId identifier of map
     * @return resolving the map object
     */
    /**
     * Retrieve a map's descriptor and load it as the
     * current map managed by this service
     * @param {?} mapId identifier of map
     * @return {?} resolving the map object
     */
    MapInstance.prototype.loadMap = /**
     * Retrieve a map's descriptor and load it as the
     * current map managed by this service
     * @param {?} mapId identifier of map
     * @return {?} resolving the map object
     */
    function (mapId) {
        var _this = this;
        return this.fetchMap(mapId).then(function (map) {
            if (!map) {
                throw new Error("The requested map ('" + mapId +
                    "') came back null");
            }
            else if (typeof (map) === 'string') {
                throw new Error("The requested map ('" + mapId +
                    "') came back as a string");
            }
            else if (map.message) {
                throw new Error("There was an error loading the requested map ('" +
                    mapId + "'): " + map.message);
            }
            //loading a map by its ID, so we need to increment it's view count
            if ('development' !== Config.env) {
                setTimeout(function (map) {
                    /** @type {?} */
                    var views = map.statistics ? (map.statistics.numViews || 0) : 0;
                    /** @type {?} */
                    var patch = [{ op: 'replace', path: '/statistics/numViews', value: views + 1 }];
                    _this.getService(ItemTypes.MAP).patch(map.id, patch)
                        // this.mapService.patch(map.id, patch)
                        .then(function (updated) { map.statistics = updated.statistics; })
                        .catch(function (e) {
                        console.log("MapInstance.saveMap() - Error updating view " +
                            "count for map ('" + mapId + "'): " + e);
                    });
                }, 1000, map);
            }
            //load the map into the viewer
            //load the map into the viewer
            _this.loadMapFromObj(map);
            return map;
        })
            .catch(function (err) {
            console.log("MapInstance.loadMap() - " +
                "The requested map could not be loaded because " + err.message);
            /** @type {?} */
            var e = new Error("The requested map ('" + mapId +
                "') could not be loaded because of the following error(s): " +
                err.message);
            return Q.reject(e);
        });
    };
    /**
     * Load a map from its descriptor as the current
     * map managed by this service
     * @param map object
     */
    /**
     * Load a map from its descriptor as the current
     * map managed by this service
     * @param {?} map object
     * @return {?}
     */
    MapInstance.prototype.loadMapFromObj = /**
     * Load a map from its descriptor as the current
     * map managed by this service
     * @param {?} map object
     * @return {?}
     */
    function (map) {
        var _this = this;
        // console.log("Loading Map Object");
        // console.log(map);
        this._mapId = map.id;
        this._mapDef = map;
        map.extent = map.extent || {};
        /** @type {?} */
        var west = isNaN(map.extent.minx) ? -179.0 : map.extent.minx * 1.0;
        /** @type {?} */
        var east = isNaN(map.extent.maxx) ? 179.0 : map.extent.maxx * 1.0;
        /** @type {?} */
        var south = isNaN(map.extent.miny) ? -89.0 : map.extent.miny * 1.0;
        /** @type {?} */
        var north = isNaN(map.extent.maxy) ? 89.0 : map.extent.maxy * 1.0;
        /** @type {?} */
        var t;
        if (west > east) {
            t = Math.min(west, east);
            east = map.extent.maxx = Math.max(west, east);
            west = map.extent.minx = t;
        }
        if (south > north) {
            t = Math.min(south, north);
            north = map.extent.maxy = Math.max(south, north);
            south = map.extent.miny = t;
        }
        //prevent out-of-bounds extents
        if (west < -180.0)
            west = -179.0;
        if (east > 180.0)
            east = 179.0;
        if (south < -90.0)
            south = -89.0;
        if (north > 90.0)
            north = 89.0;
        //set extent from loaded map
        this._defaultExtent = map.extent;
        /** @type {?} */
        var extent = map.extent;
        //remove existing layers
        this._mapInstance.eachLayer(function (l) {
            _this._mapInstance.removeLayer(l);
        });
        this._layerCache = {};
        this._layerStates = [];
        //set new base layer
        this.setBaseLayer(map.baseLayer);
        //add layers from loaded map
        this.addLayers(map.layers);
        //add features
        if (map.annotations && map.annotations.geoJSON) {
            /** @type {?} */
            var fc = map.annotations.geoJSON;
            if (fc.features)
                this.addFeatures(fc.features);
            else
                this.addFeatures([fc]);
        }
        this._mapInstance.fitBounds([
            [extent.miny, extent.minx],
            [extent.maxy, extent.maxx]
        ]);
        this.clean();
        this.notify('map:loaded', map);
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    MapInstance.prototype.destroyMap = /**
     *
     * @return {?}
     */
    function () {
        // console.log("Destroying Map");
        this._mapInstance = null;
        this._layerCache = null;
        this._layerStates = null;
        this._featureLayer = null;
    };
    /**
     * Used to take an existing map that is already persisted on the
     * server and unlink it here in the client so that it will be saved
     * as a completely new map when mapService.saveMap(...) is next called
     */
    /**
     * Used to take an existing map that is already persisted on the
     * server and unlink it here in the client so that it will be saved
     * as a completely new map when mapService.saveMap(...) is next called
     * @param {?} mapToUse
     * @return {?}
     */
    MapInstance.prototype.setAsNewMap = /**
     * Used to take an existing map that is already persisted on the
     * server and unlink it here in the client so that it will be saved
     * as a completely new map when mapService.saveMap(...) is next called
     * @param {?} mapToUse
     * @return {?}
     */
    function (mapToUse) {
        this._mapId = null;
        this._mapDef = mapToUse || this.initializeMapDefinition();
    };
    /* ==============================================
        Tool operations
       ============================================== */
    /**
     * @param {?} id
     * @param {?} tool
     * @return {?}
     */
    MapInstance.prototype.registerTool = /**
     * @param {?} id
     * @param {?} tool
     * @return {?}
     */
    function (id, tool) {
        this._tools[id] = tool;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    MapInstance.prototype.unregisterTool = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this._tools[id] = null;
    };
    /**
     * @param {?} id
     * @param {?} finish
     * @return {?}
     */
    MapInstance.prototype.enableTool = /**
     * @param {?} id
     * @param {?} finish
     * @return {?}
     */
    function (id, finish) {
        if (!this._tools[id])
            return false;
        this._tools[id].activate(function () {
            this.notify('tool:disabled', id);
        });
        this.notify('tool:enabled', id);
    };
    /* ----------- MISC ------------ */
    //https://github.com/gsklee/ngStorage
    /**
     * @return {?}
     */
    MapInstance.prototype.cacheMap = /**
     * @return {?}
     */
    function () {
        if (this.state && this.state.dirty) {
            /** @type {?} */
            var map = this.getMapResourceContent();
            //use exploded layer info
            map.layers = this._layerStates.slice(0);
            // $sessionStorage.map = map;
        }
    };
    /**
     * @return {?}
     */
    MapInstance.prototype.restoreMap = /**
     * @return {?}
     */
    function () {
        // if($sessionStorage.map) {
        //     console.log("Restoring cached map");
        //     let map = $sessionStorage.map;
        //     // console.log(JSON.stringify(map));
        //     $sessionStorage.map = null;
        //     this.loadMapFromObj(map);
        // }
    };
    return MapInstance;
}(Listener));
export default MapInstance;
if (false) {
    /** @type {?} */
    MapInstance.prototype.svcCache;
    /** @type {?} */
    MapInstance.prototype.serviceFactory;
    /** @type {?} */
    MapInstance.prototype.httpClient;
    /** @type {?} */
    MapInstance.prototype._key;
    /** @type {?} */
    MapInstance.prototype._mapId;
    /** @type {?} */
    MapInstance.prototype._mapDef;
    /** @type {?} */
    MapInstance.prototype._mapInstance;
    /** @type {?} */
    MapInstance.prototype._defaultExtent;
    /** @type {?} */
    MapInstance.prototype._baseLayerDef;
    /** @type {?} */
    MapInstance.prototype._baseLayer;
    /** @type {?} */
    MapInstance.prototype._layerStates;
    /** @type {?} */
    MapInstance.prototype._layerCache;
    /** @type {?} */
    MapInstance.prototype._layerErrors;
    /** @type {?} */
    MapInstance.prototype._layerErrorHandler;
    /** @type {?} */
    MapInstance.prototype._featureLayer;
    /** @type {?} */
    MapInstance.prototype._featureLayerVisible;
    /** @type {?} */
    MapInstance.prototype._tools;
    /** @type {?} */
    MapInstance.prototype.state;
    /** @type {?} */
    MapInstance.prototype._geoJsonLayerOpts;
}

//# sourceMappingURL=data:application/json;base64,