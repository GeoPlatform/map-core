/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Control, Map, DomUtil, DomEvent, layerGroup, polyline, CircleMarker, divIcon, marker } from 'leaflet';
var ɵ0 = function (map) {
    /** @type {?} */
    var className = 'leaflet-control-zoom leaflet-bar leaflet-control';
    /** @type {?} */
    var container = DomUtil.create('div', className);
    this._createButton('&#8674;', 'Measure', 'leaflet-control-measure leaflet-bar-part leaflet-bar-part-top-and-bottom', container, this._toggleMeasure, this);
    return container;
}, ɵ1 = function (html, title, className, container, fn, context) {
    /** @type {?} */
    var link = DomUtil.create('a', className, container);
    link.innerHTML = html;
    (/** @type {?} */ (link)).href = '#';
    link.title = title;
    DomEvent
        .on(link, 'click', DomEvent.stopPropagation)
        .on(link, 'click', DomEvent.preventDefault)
        .on(link, 'click', fn, context)
        .on(link, 'dblclick', DomEvent.stopPropagation);
    return link;
}, ɵ2 = function () {
    this._measuring = !this._measuring;
    if (this._measuring) {
        DomUtil.addClass(this._container, 'leaflet-control-measure-on');
        this._startMeasuring();
    }
    else {
        DomUtil.removeClass(this._container, 'leaflet-control-measure-on');
        this._stopMeasuring();
    }
}, ɵ3 = function () {
    this._oldCursor = this._map._container.style.cursor;
    this._map._container.style.cursor = 'crosshair';
    this._doubleClickZoom = this._map.doubleClickZoom.enabled();
    this._map.doubleClickZoom.disable();
    DomEvent
        .on(this._map, 'mousemove', this._mouseMove, this)
        .on(this._map, 'click', this._mouseClick, this)
        .on(this._map, 'dblclick', this._finishPath, this);
    //.on( (document as Document), 'keydown', this._onKeyDown, this);
    if (!this._layerPaint) {
        this._layerPaint = layerGroup().addTo(this._map);
    }
    if (!this._points) {
        this._points = [];
    }
}, ɵ4 = function () {
    this._map._container.style.cursor = this._oldCursor;
    DomEvent
        //.off((document as Document), 'keydown', this._onKeyDown, this)
        .off(this._map, 'mousemove', this._mouseMove, this)
        .off(this._map, 'click', this._mouseClick, this)
        .off(this._map, 'dblclick', this._mouseClick, this);
    if (this._doubleClickZoom) {
        this._map.doubleClickZoom.enable();
    }
    if (this._layerPaint) {
        this._layerPaint.clearLayers();
    }
    this._restartPath();
}, ɵ5 = function (e) {
    if (!e.latlng || !this._lastPoint) {
        return;
    }
    if (!this._layerPaintPathTemp) {
        /** @type {?} */
        var opts = /** @type {?} */ ({
            color: 'black',
            weight: 1.5,
            clickable: false,
            dashArray: '6,3'
        });
        this._layerPaintPathTemp = polyline([this._lastPoint, e.latlng], opts)
            .addTo(this._layerPaint);
    }
    else {
        this._layerPaintPathTemp.spliceLatLngs(0, 2, this._lastPoint, e.latlng);
    }
    if (this._tooltip) {
        if (!this._distance) {
            this._distance = 0;
        }
        this._updateTooltipPosition(e.latlng);
        /** @type {?} */
        var distance = e.latlng.distanceTo(this._lastPoint);
        this._updateTooltipDistance(this._distance + distance, distance);
    }
}, ɵ6 = function (e) {
    // Skip if no coordinates
    if (!e.latlng) {
        return;
    }
    // If we have a tooltip, update the distance and create a new tooltip, leaving the old one exactly where it is (i.e. where the user has clicked)
    if (this._lastPoint && this._tooltip) {
        if (!this._distance) {
            this._distance = 0;
        }
        this._updateTooltipPosition(e.latlng);
        /** @type {?} */
        var distance = e.latlng.distanceTo(this._lastPoint);
        this._updateTooltipDistance(this._distance + distance, distance);
        this._distance += distance;
    }
    this._createTooltip(e.latlng);
    // If this is already the second click, add the location to the fix path (create one first if we don't have one)
    if (this._lastPoint && !this._layerPaintPath) {
        /** @type {?} */
        var opts = /** @type {?} */ ({
            color: 'black',
            weight: 2,
            clickable: false
        });
        this._layerPaintPath = polyline([this._lastPoint], opts).addTo(this._layerPaint);
    }
    if (this._layerPaintPath) {
        this._layerPaintPath.addLatLng(e.latlng);
    }
    // Upate the end marker to the current location
    if (this._lastCircle) {
        this._layerPaint.removeLayer(this._lastCircle);
    }
    /** @type {?} */
    var markerOpts = /** @type {?} */ ({
        color: 'black',
        opacity: 1,
        weight: 1,
        fill: true,
        fillOpacity: 1,
        radius: 2,
        clickable: this._lastCircle ? true : false
    });
    this._lastCircle = new CircleMarker(e.latlng, markerOpts).addTo(this._layerPaint);
    this._lastCircle.on('click', function () { this._finishPath(); }, this);
    // Save current location as last location
    this._lastPoint = e.latlng;
}, ɵ7 = function () {
    // Remove the last end marker as well as the last (moving tooltip)
    if (this._lastCircle) {
        this._layerPaint.removeLayer(this._lastCircle);
    }
    if (this._tooltip) {
        this._layerPaint.removeLayer(this._tooltip);
    }
    if (this._layerPaint && this._layerPaintPathTemp) {
        this._layerPaint.removeLayer(this._layerPaintPathTemp);
    }
    // Reset everything
    this._restartPath();
}, ɵ8 = function () {
    this._distance = 0;
    this._tooltip = undefined;
    this._lastCircle = undefined;
    this._lastPoint = undefined;
    this._layerPaintPath = undefined;
    this._layerPaintPathTemp = undefined;
}, ɵ9 = function (position) {
    /** @type {?} */
    var icon = divIcon({
        className: 'leaflet-measure-tooltip',
        iconAnchor: [-5, -5]
    });
    this._tooltip = marker(position, {
        icon: icon,
        clickable: false
    }).addTo(this._layerPaint);
}, ɵ10 = function (position) {
    this._tooltip.setLatLng(position);
}, ɵ11 = function (total, difference) {
    /** @type {?} */
    var totalRound = this._round(total);
    /** @type {?} */
    var differenceRound = this._round(difference);
    /** @type {?} */
    var text = '<div class="leaflet-measure-tooltip-total">' + totalRound + ' nm</div>';
    if (differenceRound > 0 && totalRound != differenceRound) {
        text += '<div class="leaflet-measure-tooltip-difference">(+' + differenceRound + ' nm)</div>';
    }
    this._tooltip._icon.innerHTML = text;
}, ɵ12 = function (val) {
    return Math.round((val / 1852) * 10) / 10;
}, ɵ13 = function (e) {
    if (e.keyCode == 27) {
        // If not in path exit measuring mode, else just finish path
        if (!this._lastPoint) {
            this._toggleMeasure();
        }
        else {
            this._finishPath();
        }
    }
};
/** @type {?} */
var measureControl = Control.extend({
    options: {
        position: 'topleft'
    },
    onAdd: ɵ0,
    _createButton: ɵ1,
    _toggleMeasure: ɵ2,
    _startMeasuring: ɵ3,
    _stopMeasuring: ɵ4,
    _mouseMove: ɵ5,
    _mouseClick: ɵ6,
    _finishPath: ɵ7,
    _restartPath: ɵ8,
    _createTooltip: ɵ9,
    _updateTooltipPosition: ɵ10,
    _updateTooltipDistance: ɵ11,
    _round: ɵ12,
    _onKeyDown: ɵ13
});
if ((/** @type {?} */ (window)).L) {
    /** @type {?} */
    var L_1 = (/** @type {?} */ (window)).L;
    L_1.Control.Measure = measureControl;
    L_1.control.measure = function (options) {
        return new L_1.Control.Measure(options);
    };
}
Map.mergeOptions({
    measureControl: false
});
Map.addInitHook(function () {
    if (this.options.measureControl) {
        this.measureControl = new measureControl();
        this.addControl(this.measureControl);
    }
});
export default measureControl;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13 };

//# sourceMappingURL=data:application/json;base64,