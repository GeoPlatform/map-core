/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// import * as L from "leaflet";
// import * as esri from "esri-leaflet";
import Polyfills from "./polyfills";
Polyfills();
import LoadingControl from './control/L.Control.Loading';
import MeasureControl from './control/L.Control.MeasureControl';
import MousePositionControl from './control/L.Control.MousePosition';
import FeatureEditor from './control/L.Control.FeatureEditor';
import DefaultBaseLayer from './layer/baselayer-default';
import LayerFactory from './layer/factory';
import OSMLayerFactory from './layer/osm-factory';
import ESRIClusterFeatureLayer from './layer/L.esri.Cluster.FeatureLayer';
import { ClusteredFeatureLayer, clusteredFeatures, geoJsonFeed } from './layer/cluster-feature';
import FeatureLayer from './layer/feature';
import { WMS, wms } from './layer/wms';
import { WMST, wmst } from './layer/wmst';
import { WMTS, wmts } from './layer/wmts';
import ESRITileLayer from './layer/L.TileLayer.ESRI';
import OSM from './layer/osm';
import MapInstance from './map/instance';
import MapFactory from './map/factory';
import ServiceTypes from './service/types';
import PopupTemplate from './shared/popup-template';
import StyleResolver from './shared/style-resolver';
export { LoadingControl, MeasureControl, MousePositionControl, FeatureEditor, DefaultBaseLayer, LayerFactory, OSMLayerFactory, ESRIClusterFeatureLayer, ClusteredFeatureLayer, clusteredFeatures, geoJsonFeed, FeatureLayer, WMS, wms, WMST, wmst, WMTS, wmts, ESRITileLayer, OSM, MapInstance, MapFactory, ServiceTypes, PopupTemplate, StyleResolver };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9nZW9wbGF0Zm9ybS5tYXAvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsU0FBUyxFQUFFLENBQUM7QUFHWixPQUFPLGNBQWMsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLGNBQWMsTUFBTSxvQ0FBb0MsQ0FBQztBQUNoRSxPQUFPLG9CQUFvQixNQUFNLG1DQUFtQyxDQUFDO0FBQ3JFLE9BQU8sYUFBYSxNQUFNLG1DQUFtQyxDQUFDO0FBRTlELE9BQU8sZ0JBQWdCLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxZQUFZLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxlQUFlLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyx1QkFBdUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLGlCQUFpQixFQUNqQixXQUFXLEVBQ2QsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLFlBQVksTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLGFBQWEsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFFOUIsT0FBTyxXQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxVQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXZDLE9BQU8sWUFBWSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sYUFBYSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sYUFBYSxNQUFNLHlCQUF5QixDQUFDO0FBS3BELE9BQU8sRUFDSCxjQUFjLEVBQ2QsY0FBYyxFQUNkLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixlQUFlLEVBQ2YsdUJBQXVCLEVBQ3ZCLHFCQUFxQixFQUNyQixpQkFBaUIsRUFDakIsV0FBVyxFQUNYLFlBQVksRUFDWixHQUFHLEVBQUUsR0FBRyxFQUNSLElBQUksRUFBRSxJQUFJLEVBQ1YsSUFBSSxFQUFFLElBQUksRUFDVixhQUFhLEVBQ2IsR0FBRyxFQUNILFdBQVcsRUFDWCxVQUFVLEVBQ1YsWUFBWSxFQUNaLGFBQWEsRUFDYixhQUFhLEVBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIGltcG9ydCAqIGFzIEwgZnJvbSBcImxlYWZsZXRcIjtcbi8vIGltcG9ydCAqIGFzIGVzcmkgZnJvbSBcImVzcmktbGVhZmxldFwiO1xuXG5pbXBvcnQgUG9seWZpbGxzIGZyb20gXCIuL3BvbHlmaWxsc1wiO1xuUG9seWZpbGxzKCk7XG5cblxuaW1wb3J0IExvYWRpbmdDb250cm9sIGZyb20gJy4vY29udHJvbC9MLkNvbnRyb2wuTG9hZGluZyc7XG5pbXBvcnQgTWVhc3VyZUNvbnRyb2wgZnJvbSAnLi9jb250cm9sL0wuQ29udHJvbC5NZWFzdXJlQ29udHJvbCc7XG5pbXBvcnQgTW91c2VQb3NpdGlvbkNvbnRyb2wgZnJvbSAnLi9jb250cm9sL0wuQ29udHJvbC5Nb3VzZVBvc2l0aW9uJztcbmltcG9ydCBGZWF0dXJlRWRpdG9yIGZyb20gJy4vY29udHJvbC9MLkNvbnRyb2wuRmVhdHVyZUVkaXRvcic7XG5cbmltcG9ydCBEZWZhdWx0QmFzZUxheWVyIGZyb20gJy4vbGF5ZXIvYmFzZWxheWVyLWRlZmF1bHQnO1xuaW1wb3J0IExheWVyRmFjdG9yeSBmcm9tICcuL2xheWVyL2ZhY3RvcnknO1xuaW1wb3J0IE9TTUxheWVyRmFjdG9yeSBmcm9tICcuL2xheWVyL29zbS1mYWN0b3J5JztcbmltcG9ydCBFU1JJQ2x1c3RlckZlYXR1cmVMYXllciBmcm9tICcuL2xheWVyL0wuZXNyaS5DbHVzdGVyLkZlYXR1cmVMYXllcic7XG5pbXBvcnQge1xuICAgIENsdXN0ZXJlZEZlYXR1cmVMYXllcixcbiAgICBjbHVzdGVyZWRGZWF0dXJlcyxcbiAgICBnZW9Kc29uRmVlZFxufSBmcm9tICcuL2xheWVyL2NsdXN0ZXItZmVhdHVyZSc7XG5pbXBvcnQgRmVhdHVyZUxheWVyIGZyb20gJy4vbGF5ZXIvZmVhdHVyZSc7XG5pbXBvcnQge1dNUywgd21zfSBmcm9tICcuL2xheWVyL3dtcyc7XG5pbXBvcnQge1dNU1QsIHdtc3R9IGZyb20gJy4vbGF5ZXIvd21zdCc7XG5pbXBvcnQge1dNVFMsIHdtdHN9IGZyb20gJy4vbGF5ZXIvd210cyc7XG5pbXBvcnQgRVNSSVRpbGVMYXllciBmcm9tICcuL2xheWVyL0wuVGlsZUxheWVyLkVTUkknO1xuaW1wb3J0IE9TTSBmcm9tICcuL2xheWVyL29zbSc7XG5cbmltcG9ydCBNYXBJbnN0YW5jZSBmcm9tICcuL21hcC9pbnN0YW5jZSc7XG5pbXBvcnQgTWFwRmFjdG9yeSBmcm9tICcuL21hcC9mYWN0b3J5JztcblxuaW1wb3J0IFNlcnZpY2VUeXBlcyBmcm9tICcuL3NlcnZpY2UvdHlwZXMnO1xuXG5pbXBvcnQgUG9wdXBUZW1wbGF0ZSBmcm9tICcuL3NoYXJlZC9wb3B1cC10ZW1wbGF0ZSc7XG5pbXBvcnQgU3R5bGVSZXNvbHZlciBmcm9tICcuL3NoYXJlZC9zdHlsZS1yZXNvbHZlcic7XG5cblxuXG5cbmV4cG9ydCB7XG4gICAgTG9hZGluZ0NvbnRyb2wsXG4gICAgTWVhc3VyZUNvbnRyb2wsXG4gICAgTW91c2VQb3NpdGlvbkNvbnRyb2wsXG4gICAgRmVhdHVyZUVkaXRvcixcbiAgICBEZWZhdWx0QmFzZUxheWVyLFxuICAgIExheWVyRmFjdG9yeSxcbiAgICBPU01MYXllckZhY3RvcnksXG4gICAgRVNSSUNsdXN0ZXJGZWF0dXJlTGF5ZXIsXG4gICAgQ2x1c3RlcmVkRmVhdHVyZUxheWVyLFxuICAgIGNsdXN0ZXJlZEZlYXR1cmVzLFxuICAgIGdlb0pzb25GZWVkLFxuICAgIEZlYXR1cmVMYXllcixcbiAgICBXTVMsIHdtcyxcbiAgICBXTVNULCB3bXN0LFxuICAgIFdNVFMsIHdtdHMsXG4gICAgRVNSSVRpbGVMYXllcixcbiAgICBPU00sXG4gICAgTWFwSW5zdGFuY2UsXG4gICAgTWFwRmFjdG9yeSxcbiAgICBTZXJ2aWNlVHlwZXMsXG4gICAgUG9wdXBUZW1wbGF0ZSxcbiAgICBTdHlsZVJlc29sdmVyXG59O1xuIl19