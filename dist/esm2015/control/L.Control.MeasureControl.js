/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Control, Map, DomUtil, DomEvent, layerGroup, polyline, CircleMarker, divIcon, marker } from 'leaflet';
const ɵ0 = function (map) {
    /** @type {?} */
    var className = 'leaflet-control-zoom leaflet-bar leaflet-control';
    /** @type {?} */
    var container = DomUtil.create('div', className);
    this._createButton('&#8674;', 'Measure', 'leaflet-control-measure leaflet-bar-part leaflet-bar-part-top-and-bottom', container, this._toggleMeasure, this);
    return container;
}, ɵ1 = function (html, title, className, container, fn, context) {
    /** @type {?} */
    var link = DomUtil.create('a', className, container);
    link.innerHTML = html;
    (/** @type {?} */ (link)).href = '#';
    link.title = title;
    DomEvent
        .on(link, 'click', DomEvent.stopPropagation)
        .on(link, 'click', DomEvent.preventDefault)
        .on(link, 'click', fn, context)
        .on(link, 'dblclick', DomEvent.stopPropagation);
    return link;
}, ɵ2 = function () {
    this._measuring = !this._measuring;
    if (this._measuring) {
        DomUtil.addClass(this._container, 'leaflet-control-measure-on');
        this._startMeasuring();
    }
    else {
        DomUtil.removeClass(this._container, 'leaflet-control-measure-on');
        this._stopMeasuring();
    }
}, ɵ3 = function () {
    this._oldCursor = this._map._container.style.cursor;
    this._map._container.style.cursor = 'crosshair';
    this._doubleClickZoom = this._map.doubleClickZoom.enabled();
    this._map.doubleClickZoom.disable();
    DomEvent
        .on(this._map, 'mousemove', this._mouseMove, this)
        .on(this._map, 'click', this._mouseClick, this)
        .on(this._map, 'dblclick', this._finishPath, this);
    //.on( (document as Document), 'keydown', this._onKeyDown, this);
    if (!this._layerPaint) {
        this._layerPaint = layerGroup().addTo(this._map);
    }
    if (!this._points) {
        this._points = [];
    }
}, ɵ4 = function () {
    this._map._container.style.cursor = this._oldCursor;
    DomEvent
        //.off((document as Document), 'keydown', this._onKeyDown, this)
        .off(this._map, 'mousemove', this._mouseMove, this)
        .off(this._map, 'click', this._mouseClick, this)
        .off(this._map, 'dblclick', this._mouseClick, this);
    if (this._doubleClickZoom) {
        this._map.doubleClickZoom.enable();
    }
    if (this._layerPaint) {
        this._layerPaint.clearLayers();
    }
    this._restartPath();
}, ɵ5 = function (e) {
    if (!e.latlng || !this._lastPoint) {
        return;
    }
    if (!this._layerPaintPathTemp) {
        /** @type {?} */
        let opts = /** @type {?} */ ({
            color: 'black',
            weight: 1.5,
            clickable: false,
            dashArray: '6,3'
        });
        this._layerPaintPathTemp = polyline([this._lastPoint, e.latlng], opts)
            .addTo(this._layerPaint);
    }
    else {
        this._layerPaintPathTemp.spliceLatLngs(0, 2, this._lastPoint, e.latlng);
    }
    if (this._tooltip) {
        if (!this._distance) {
            this._distance = 0;
        }
        this._updateTooltipPosition(e.latlng);
        /** @type {?} */
        var distance = e.latlng.distanceTo(this._lastPoint);
        this._updateTooltipDistance(this._distance + distance, distance);
    }
}, ɵ6 = function (e) {
    // Skip if no coordinates
    if (!e.latlng) {
        return;
    }
    // If we have a tooltip, update the distance and create a new tooltip, leaving the old one exactly where it is (i.e. where the user has clicked)
    if (this._lastPoint && this._tooltip) {
        if (!this._distance) {
            this._distance = 0;
        }
        this._updateTooltipPosition(e.latlng);
        /** @type {?} */
        var distance = e.latlng.distanceTo(this._lastPoint);
        this._updateTooltipDistance(this._distance + distance, distance);
        this._distance += distance;
    }
    this._createTooltip(e.latlng);
    // If this is already the second click, add the location to the fix path (create one first if we don't have one)
    if (this._lastPoint && !this._layerPaintPath) {
        /** @type {?} */
        let opts = /** @type {?} */ ({
            color: 'black',
            weight: 2,
            clickable: false
        });
        this._layerPaintPath = polyline([this._lastPoint], opts).addTo(this._layerPaint);
    }
    if (this._layerPaintPath) {
        this._layerPaintPath.addLatLng(e.latlng);
    }
    // Upate the end marker to the current location
    if (this._lastCircle) {
        this._layerPaint.removeLayer(this._lastCircle);
    }
    /** @type {?} */
    let markerOpts = /** @type {?} */ ({
        color: 'black',
        opacity: 1,
        weight: 1,
        fill: true,
        fillOpacity: 1,
        radius: 2,
        clickable: this._lastCircle ? true : false
    });
    this._lastCircle = new CircleMarker(e.latlng, markerOpts).addTo(this._layerPaint);
    this._lastCircle.on('click', function () { this._finishPath(); }, this);
    // Save current location as last location
    this._lastPoint = e.latlng;
}, ɵ7 = function () {
    // Remove the last end marker as well as the last (moving tooltip)
    if (this._lastCircle) {
        this._layerPaint.removeLayer(this._lastCircle);
    }
    if (this._tooltip) {
        this._layerPaint.removeLayer(this._tooltip);
    }
    if (this._layerPaint && this._layerPaintPathTemp) {
        this._layerPaint.removeLayer(this._layerPaintPathTemp);
    }
    // Reset everything
    this._restartPath();
}, ɵ8 = function () {
    this._distance = 0;
    this._tooltip = undefined;
    this._lastCircle = undefined;
    this._lastPoint = undefined;
    this._layerPaintPath = undefined;
    this._layerPaintPathTemp = undefined;
}, ɵ9 = function (position) {
    /** @type {?} */
    var icon = divIcon({
        className: 'leaflet-measure-tooltip',
        iconAnchor: [-5, -5]
    });
    this._tooltip = marker(position, {
        icon: icon,
        clickable: false
    }).addTo(this._layerPaint);
}, ɵ10 = function (position) {
    this._tooltip.setLatLng(position);
}, ɵ11 = function (total, difference) {
    /** @type {?} */
    var totalRound = this._round(total);
    /** @type {?} */
    var differenceRound = this._round(difference);
    /** @type {?} */
    var text = '<div class="leaflet-measure-tooltip-total">' + totalRound + ' nm</div>';
    if (differenceRound > 0 && totalRound != differenceRound) {
        text += '<div class="leaflet-measure-tooltip-difference">(+' + differenceRound + ' nm)</div>';
    }
    this._tooltip._icon.innerHTML = text;
}, ɵ12 = function (val) {
    return Math.round((val / 1852) * 10) / 10;
}, ɵ13 = function (e) {
    if (e.keyCode == 27) {
        // If not in path exit measuring mode, else just finish path
        if (!this._lastPoint) {
            this._toggleMeasure();
        }
        else {
            this._finishPath();
        }
    }
};
/** @type {?} */
var measureControl = Control.extend({
    options: {
        position: 'topleft'
    },
    onAdd: ɵ0,
    _createButton: ɵ1,
    _toggleMeasure: ɵ2,
    _startMeasuring: ɵ3,
    _stopMeasuring: ɵ4,
    _mouseMove: ɵ5,
    _mouseClick: ɵ6,
    _finishPath: ɵ7,
    _restartPath: ɵ8,
    _createTooltip: ɵ9,
    _updateTooltipPosition: ɵ10,
    _updateTooltipDistance: ɵ11,
    _round: ɵ12,
    _onKeyDown: ɵ13
});
if ((/** @type {?} */ (window)).L) {
    /** @type {?} */
    const L = (/** @type {?} */ (window)).L;
    L.Control.Measure = measureControl;
    L.control.measure = function (options) {
        return new L.Control.Measure(options);
    };
}
Map.mergeOptions({
    measureControl: false
});
Map.addInitHook(function () {
    if (this.options.measureControl) {
        this.measureControl = new measureControl();
        this.addControl(this.measureControl);
    }
});
export default measureControl;
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTC5Db250cm9sLk1lYXN1cmVDb250cm9sLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ2VvcGxhdGZvcm0ubWFwLyIsInNvdXJjZXMiOlsiY29udHJvbC9MLkNvbnRyb2wuTWVhc3VyZUNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsR0FBRyxFQUNILE9BQU8sRUFBRSxRQUFRLEVBQ2pCLFVBQVUsRUFDVixRQUFRLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBRTFDLE1BQU0sU0FBUyxDQUFDO1dBUU4sVUFBVSxHQUFHOztJQUNoQixJQUFJLFNBQVMsR0FBRyxrREFBa0QsQ0FDakI7O0lBRGpELElBQ0ksU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWpELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSwwRUFBMEUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUUzSixPQUFPLFNBQVMsQ0FBQztDQUNwQixPQUVjLFVBQVUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPOztJQUNuRSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDdEIsbUJBQUMsSUFBeUIsRUFBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFbkIsUUFBUTtTQUNILEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUM7U0FDM0MsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFB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QWMsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3hDO0NBQ0osQ0FBQyxDQUFDO0FBR0gsZUFBZSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7XG4gICAgQ29udHJvbCwgY29udHJvbCxcbiAgICBNYXAsXG4gICAgRG9tVXRpbCwgRG9tRXZlbnQsXG4gICAgbGF5ZXJHcm91cCxcbiAgICBwb2x5bGluZSwgQ2lyY2xlTWFya2VyLCBkaXZJY29uLCBtYXJrZXIsXG4gICAgUG9seWxpbmVPcHRpb25zLCBDaXJjbGVNYXJrZXJPcHRpb25zXG59IGZyb20gJ2xlYWZsZXQnO1xuXG5cbnZhciBtZWFzdXJlQ29udHJvbCA9IENvbnRyb2wuZXh0ZW5kKHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCdcbiAgICB9LFxuXG4gICAgb25BZGQ6IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICdsZWFmbGV0LWNvbnRyb2wtem9vbSBsZWFmbGV0LWJhciBsZWFmbGV0LWNvbnRyb2wnLFxuICAgICAgICAgICAgY29udGFpbmVyID0gRG9tVXRpbC5jcmVhdGUoJ2RpdicsIGNsYXNzTmFtZSk7XG5cbiAgICAgICAgdGhpcy5fY3JlYXRlQnV0dG9uKCcmIzg2NzQ7JywgJ01lYXN1cmUnLCAnbGVhZmxldC1jb250cm9sLW1lYXN1cmUgbGVhZmxldC1iYXItcGFydCBsZWFmbGV0LWJhci1wYXJ0LXRvcC1hbmQtYm90dG9tJywgY29udGFpbmVyLCB0aGlzLl90b2dnbGVNZWFzdXJlLCB0aGlzKTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH0sXG5cbiAgICBfY3JlYXRlQnV0dG9uOiBmdW5jdGlvbiAoaHRtbCwgdGl0bGUsIGNsYXNzTmFtZSwgY29udGFpbmVyLCBmbiwgY29udGV4dCkge1xuICAgICAgICB2YXIgbGluayA9IERvbVV0aWwuY3JlYXRlKCdhJywgY2xhc3NOYW1lLCBjb250YWluZXIpO1xuICAgICAgICBsaW5rLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIChsaW5rIGFzIEhUTUxBbmNob3JFbGVtZW50KS5ocmVmID0gJyMnO1xuICAgICAgICBsaW5rLnRpdGxlID0gdGl0bGU7XG5cbiAgICAgICAgRG9tRXZlbnRcbiAgICAgICAgICAgIC5vbihsaW5rLCAnY2xpY2snLCBEb21FdmVudC5zdG9wUHJvcGFnYXRpb24pXG4gICAgICAgICAgICAub24obGluaywgJ2NsaWNrJywgRG9tRXZlbnQucHJldmVudERlZmF1bHQpXG4gICAgICAgICAgICAub24obGluaywgJ2NsaWNrJywgZm4sIGNvbnRleHQpXG4gICAgICAgICAgICAub24obGluaywgJ2RibGNsaWNrJywgRG9tRXZlbnQuc3RvcFByb3BhZ2F0aW9uKTtcblxuICAgICAgICByZXR1cm4gbGluaztcbiAgICB9LFxuXG4gICAgX3RvZ2dsZU1lYXN1cmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbWVhc3VyaW5nID0gIXRoaXMuX21lYXN1cmluZztcblxuICAgICAgICBpZih0aGlzLl9tZWFzdXJpbmcpIHtcbiAgICAgICAgICAgIERvbVV0aWwuYWRkQ2xhc3ModGhpcy5fY29udGFpbmVyLCAnbGVhZmxldC1jb250cm9sLW1lYXN1cmUtb24nKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0TWVhc3VyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBEb21VdGlsLnJlbW92ZUNsYXNzKHRoaXMuX2NvbnRhaW5lciwgJ2xlYWZsZXQtY29udHJvbC1tZWFzdXJlLW9uJyk7XG4gICAgICAgICAgICB0aGlzLl9zdG9wTWVhc3VyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3N0YXJ0TWVhc3VyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fb2xkQ3Vyc29yID0gdGhpcy5fbWFwLl9jb250YWluZXIuc3R5bGUuY3Vyc29yO1xuICAgICAgICB0aGlzLl9tYXAuX2NvbnRhaW5lci5zdHlsZS5jdXJzb3IgPSAnY3Jvc3NoYWlyJztcblxuICAgICAgICB0aGlzLl9kb3VibGVDbGlja1pvb20gPSB0aGlzLl9tYXAuZG91YmxlQ2xpY2tab29tLmVuYWJsZWQoKTtcbiAgICAgICAgdGhpcy5fbWFwLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKCk7XG5cbiAgICAgICAgRG9tRXZlbnRcbiAgICAgICAgICAgIC5vbih0aGlzLl9tYXAsICdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmUsIHRoaXMpXG4gICAgICAgICAgICAub24odGhpcy5fbWFwLCAnY2xpY2snLCB0aGlzLl9tb3VzZUNsaWNrLCB0aGlzKVxuICAgICAgICAgICAgLm9uKHRoaXMuX21hcCwgJ2RibGNsaWNrJywgdGhpcy5fZmluaXNoUGF0aCwgdGhpcylcbiAgICAgICAgICAgIC8vLm9uKCAoZG9jdW1lbnQgYXMgRG9jdW1lbnQpLCAna2V5ZG93bicsIHRoaXMuX29uS2V5RG93biwgdGhpcyk7XG5cbiAgICAgICAgaWYoIXRoaXMuX2xheWVyUGFpbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyUGFpbnQgPSBsYXllckdyb3VwKCkuYWRkVG8odGhpcy5fbWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCF0aGlzLl9wb2ludHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zdG9wTWVhc3VyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fbWFwLl9jb250YWluZXIuc3R5bGUuY3Vyc29yID0gdGhpcy5fb2xkQ3Vyc29yO1xuXG4gICAgICAgIERvbUV2ZW50XG4gICAgICAgICAgICAvLy5vZmYoKGRvY3VtZW50IGFzIERvY3VtZW50KSwgJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24sIHRoaXMpXG4gICAgICAgICAgICAub2ZmKHRoaXMuX21hcCwgJ21vdXNlbW92ZScsIHRoaXMuX21vdXNlTW92ZSwgdGhpcylcbiAgICAgICAgICAgIC5vZmYodGhpcy5fbWFwLCAnY2xpY2snLCB0aGlzLl9tb3VzZUNsaWNrLCB0aGlzKVxuICAgICAgICAgICAgLm9mZih0aGlzLl9tYXAsICdkYmxjbGljaycsIHRoaXMuX21vdXNlQ2xpY2ssIHRoaXMpO1xuXG4gICAgICAgIGlmKHRoaXMuX2RvdWJsZUNsaWNrWm9vbSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLmRvdWJsZUNsaWNrWm9vbS5lbmFibGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuX2xheWVyUGFpbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyUGFpbnQuY2xlYXJMYXllcnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Jlc3RhcnRQYXRoKCk7XG4gICAgfSxcblxuICAgIF9tb3VzZU1vdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYoIWUubGF0bG5nIHx8ICF0aGlzLl9sYXN0UG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCF0aGlzLl9sYXllclBhaW50UGF0aFRlbXApIHtcbiAgICAgICAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgICAgIHdlaWdodDogMS41LFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGFzaEFycmF5OiAnNiwzJ1xuICAgICAgICAgICAgfSBhcyBQb2x5bGluZU9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLl9sYXllclBhaW50UGF0aFRlbXAgPSBwb2x5bGluZShbdGhpcy5fbGFzdFBvaW50LCBlLmxhdGxuZ10sIG9wdHMpXG4gICAgICAgICAgICAgICAgLmFkZFRvKHRoaXMuX2xheWVyUGFpbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJQYWludFBhdGhUZW1wLnNwbGljZUxhdExuZ3MoMCwgMiwgdGhpcy5fbGFzdFBvaW50LCBlLmxhdGxuZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLl90b29sdGlwKSB7XG4gICAgICAgICAgICBpZighdGhpcy5fZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRvb2x0aXBQb3NpdGlvbihlLmxhdGxuZyk7XG5cbiAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IGUubGF0bG5nLmRpc3RhbmNlVG8odGhpcy5fbGFzdFBvaW50KTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRvb2x0aXBEaXN0YW5jZSh0aGlzLl9kaXN0YW5jZSArIGRpc3RhbmNlLCBkaXN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX21vdXNlQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gU2tpcCBpZiBubyBjb29yZGluYXRlc1xuICAgICAgICBpZighZS5sYXRsbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSB0b29sdGlwLCB1cGRhdGUgdGhlIGRpc3RhbmNlIGFuZCBjcmVhdGUgYSBuZXcgdG9vbHRpcCwgbGVhdmluZyB0aGUgb2xkIG9uZSBleGFjdGx5IHdoZXJlIGl0IGlzIChpLmUuIHdoZXJlIHRoZSB1c2VyIGhhcyBjbGlja2VkKVxuICAgICAgICBpZih0aGlzLl9sYXN0UG9pbnQgJiYgdGhpcy5fdG9vbHRpcCkge1xuICAgICAgICAgICAgaWYoIXRoaXMuX2Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzdGFuY2UgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUb29sdGlwUG9zaXRpb24oZS5sYXRsbmcpO1xuXG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBlLmxhdGxuZy5kaXN0YW5jZVRvKHRoaXMuX2xhc3RQb2ludCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUb29sdGlwRGlzdGFuY2UodGhpcy5fZGlzdGFuY2UgKyBkaXN0YW5jZSwgZGlzdGFuY2UpO1xuXG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZSArPSBkaXN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jcmVhdGVUb29sdGlwKGUubGF0bG5nKTtcblxuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYWxyZWFkeSB0aGUgc2Vjb25kIGNsaWNrLCBhZGQgdGhlIGxvY2F0aW9uIHRvIHRoZSBmaXggcGF0aCAoY3JlYXRlIG9uZSBmaXJzdCBpZiB3ZSBkb24ndCBoYXZlIG9uZSlcbiAgICAgICAgaWYodGhpcy5fbGFzdFBvaW50ICYmICF0aGlzLl9sYXllclBhaW50UGF0aCkge1xuICAgICAgICAgICAgbGV0IG9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICAgICAgd2VpZ2h0OiAyLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0gYXMgUG9seWxpbmVPcHRpb25zO1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJQYWludFBhdGggPSBwb2x5bGluZShbdGhpcy5fbGFzdFBvaW50XSwgb3B0cykuYWRkVG8odGhpcy5fbGF5ZXJQYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLl9sYXllclBhaW50UGF0aCkge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJQYWludFBhdGguYWRkTGF0TG5nKGUubGF0bG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwYXRlIHRoZSBlbmQgbWFya2VyIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgICAgIGlmKHRoaXMuX2xhc3RDaXJjbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyUGFpbnQucmVtb3ZlTGF5ZXIodGhpcy5fbGFzdENpcmNsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWFya2VyT3B0cyA9IHtcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogMSxcbiAgICAgICAgICAgIHJhZGl1czoyLFxuICAgICAgICAgICAgY2xpY2thYmxlOiB0aGlzLl9sYXN0Q2lyY2xlID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIH0gYXMgQ2lyY2xlTWFya2VyT3B0aW9ucztcbiAgICAgICAgdGhpcy5fbGFzdENpcmNsZSA9IG5ldyBDaXJjbGVNYXJrZXIoZS5sYXRsbmcsIG1hcmtlck9wdHMpLmFkZFRvKHRoaXMuX2xheWVyUGFpbnQpO1xuXG4gICAgICAgIHRoaXMuX2xhc3RDaXJjbGUub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7IHRoaXMuX2ZpbmlzaFBhdGgoKTsgfSwgdGhpcyk7XG5cbiAgICAgICAgLy8gU2F2ZSBjdXJyZW50IGxvY2F0aW9uIGFzIGxhc3QgbG9jYXRpb25cbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ID0gZS5sYXRsbmc7XG4gICAgfSxcblxuICAgIF9maW5pc2hQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsYXN0IGVuZCBtYXJrZXIgYXMgd2VsbCBhcyB0aGUgbGFzdCAobW92aW5nIHRvb2x0aXApXG4gICAgICAgIGlmKHRoaXMuX2xhc3RDaXJjbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyUGFpbnQucmVtb3ZlTGF5ZXIodGhpcy5fbGFzdENpcmNsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5fdG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJQYWludC5yZW1vdmVMYXllcih0aGlzLl90b29sdGlwKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLl9sYXllclBhaW50ICYmIHRoaXMuX2xheWVyUGFpbnRQYXRoVGVtcCkge1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJQYWludC5yZW1vdmVMYXllcih0aGlzLl9sYXllclBhaW50UGF0aFRlbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgZXZlcnl0aGluZ1xuICAgICAgICB0aGlzLl9yZXN0YXJ0UGF0aCgpO1xuICAgIH0sXG5cbiAgICBfcmVzdGFydFBhdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9kaXN0YW5jZSA9IDA7XG4gICAgICAgIHRoaXMuX3Rvb2x0aXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xhc3RDaXJjbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xhc3RQb2ludCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbGF5ZXJQYWludFBhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xheWVyUGFpbnRQYXRoVGVtcCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgX2NyZWF0ZVRvb2x0aXA6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBpY29uID0gZGl2SWNvbih7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdsZWFmbGV0LW1lYXN1cmUtdG9vbHRpcCcsXG4gICAgICAgICAgICBpY29uQW5jaG9yOiBbLTUsIC01XVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdG9vbHRpcCA9IG1hcmtlcihwb3NpdGlvbiwge1xuICAgICAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgICAgIGNsaWNrYWJsZTogZmFsc2VcbiAgICAgICAgfSkuYWRkVG8odGhpcy5fbGF5ZXJQYWludCk7XG4gICAgfSxcblxuICAgIF91cGRhdGVUb29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX3Rvb2x0aXAuc2V0TGF0TG5nKHBvc2l0aW9uKTtcbiAgICB9LFxuXG4gICAgX3VwZGF0ZVRvb2x0aXBEaXN0YW5jZTogZnVuY3Rpb24odG90YWwsIGRpZmZlcmVuY2UpIHtcbiAgICAgICAgdmFyIHRvdGFsUm91bmQgPSB0aGlzLl9yb3VuZCh0b3RhbCksXG4gICAgICAgICAgICBkaWZmZXJlbmNlUm91bmQgPSB0aGlzLl9yb3VuZChkaWZmZXJlbmNlKTtcblxuICAgICAgICB2YXIgdGV4dCA9ICc8ZGl2IGNsYXNzPVwibGVhZmxldC1tZWFzdXJlLXRvb2x0aXAtdG90YWxcIj4nICsgdG90YWxSb3VuZCArICcgbm08L2Rpdj4nO1xuICAgICAgICBpZihkaWZmZXJlbmNlUm91bmQgPiAwICYmIHRvdGFsUm91bmQgIT0gZGlmZmVyZW5jZVJvdW5kKSB7XG4gICAgICAgICAgICB0ZXh0ICs9ICc8ZGl2IGNsYXNzPVwibGVhZmxldC1tZWFzdXJlLXRvb2x0aXAtZGlmZmVyZW5jZVwiPigrJyArIGRpZmZlcmVuY2VSb3VuZCArICcgbm0pPC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Rvb2x0aXAuX2ljb24uaW5uZXJIVE1MID0gdGV4dDtcbiAgICB9LFxuXG4gICAgX3JvdW5kOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHZhbCAvIDE4NTIpICogMTApIC8gMTA7XG4gICAgfSxcblxuICAgIF9vbktleURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmKGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgLy8gSWYgbm90IGluIHBhdGggZXhpdCBtZWFzdXJpbmcgbW9kZSwgZWxzZSBqdXN0IGZpbmlzaCBwYXRoXG4gICAgICAgICAgICBpZighdGhpcy5fbGFzdFBvaW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlTWVhc3VyZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuXG5pZiggKHdpbmRvdyBhcyBhbnkpLkwpIHtcbiAgICBjb25zdCBMID0gKHdpbmRvdyBhcyBhbnkpLkw7XG4gICAgTC5Db250cm9sLk1lYXN1cmUgPSBtZWFzdXJlQ29udHJvbDtcbiAgICBMLmNvbnRyb2wubWVhc3VyZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTC5Db250cm9sLk1lYXN1cmUob3B0aW9ucyk7XG4gICAgfTtcbn1cblxuTWFwLm1lcmdlT3B0aW9ucyh7XG4gICAgbWVhc3VyZUNvbnRyb2w6IGZhbHNlXG59KTtcblxuTWFwLmFkZEluaXRIb29rKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm1lYXN1cmVDb250cm9sKSB7XG4gICAgICAgIHRoaXMubWVhc3VyZUNvbnRyb2wgPSBuZXcgbWVhc3VyZUNvbnRyb2woKTtcbiAgICAgICAgdGhpcy5hZGRDb250cm9sKHRoaXMubWVhc3VyZUNvbnRyb2wpO1xuICAgIH1cbn0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IG1lYXN1cmVDb250cm9sO1xuIl19