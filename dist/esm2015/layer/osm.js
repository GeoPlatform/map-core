/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as Q from "q";
import { LayerResourceTypes } from "../shared/resource-types";
import { QueryFactory, LayerService, XHRHttpClient, Config } from '@geoplatform/client';
export default {
    /**
     * @param {Object} layer - GeoPlatform Layer object
     * @return {boolean} true if is an OSM layer
     */
    test: function (layer) {
        return layer &&
            layer.resourceTypes &&
            layer.resourceTypes.length &&
            ~layer.resourceTypes.indexOf(LayerResourceTypes.OSM);
    },
    get: function (layerService) {
        let query = QueryFactory()
            .fields('*')
            .resourceTypes(LayerResourceTypes.OSM);
        if (!layerService)
            layerService = new LayerService(Config.ualUrl, new XHRHttpClient());
        return layerService.search(query)
            .then(response => response.results.length ? response.results[0] : null)
            .catch(e => Q.reject(e));
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3NtLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdlb3BsYXRmb3JtL21hcGNvcmUvIiwic291cmNlcyI6WyJsYXllci9vc20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFDSCxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQ3BELE1BQU8scUJBQXFCLENBQUM7QUFPOUIsZUFBZTtJQUVYOzs7T0FHRztJQUNILElBQUksRUFBRyxVQUFTLEtBQUs7UUFDakIsT0FBUSxLQUFLO1lBQ0wsS0FBSyxDQUFDLGFBQWE7WUFDbkIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNO1lBQzFCLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELEdBQUcsRUFBRyxVQUFTLFlBQTRCO1FBQ3ZDLElBQUksS0FBSyxHQUFHLFlBQVksRUFBRTthQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLElBQUcsQ0FBQyxZQUFZO1lBQ1osWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDaEMsSUFBSSxDQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUN2RSxLQUFLLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIFEgZnJvbSBcInFcIjtcbmltcG9ydCB7IExheWVyUmVzb3VyY2VUeXBlcyB9IGZyb20gXCIuLi9zaGFyZWQvcmVzb3VyY2UtdHlwZXNcIjtcbmltcG9ydCB7XG4gICAgUXVlcnlGYWN0b3J5LCBMYXllclNlcnZpY2UsIFhIUkh0dHBDbGllbnQsIENvbmZpZ1xufSAgZnJvbSAnQGdlb3BsYXRmb3JtL2NsaWVudCc7XG5cblxuLyoqXG4gKiBAcGFyYW0ge0xheWVyU2VydmljZX0gbGF5ZXJTZXJ2aWNlIC0gb3B0aW9uYWwsIEdlb1BsYXRmb3JtIExheWVyIHNlcnZpY2UgdG8gdXNlIHRvIGZldGNoIHRoZSBsYXllclxuICogQHJldHVybiB7UHJvbWlzZX0gcmVzb2x2aW5nIE9wZW5TdHJlZXQgTWFwIEdlb1BsYXRmb3JtIExheWVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciAtIEdlb1BsYXRmb3JtIExheWVyIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgaXMgYW4gT1NNIGxheWVyXG4gICAgICovXG4gICAgdGVzdCA6IGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICAgIHJldHVybiAgbGF5ZXIgJiZcbiAgICAgICAgICAgICAgICBsYXllci5yZXNvdXJjZVR5cGVzICYmXG4gICAgICAgICAgICAgICAgbGF5ZXIucmVzb3VyY2VUeXBlcy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICB+bGF5ZXIucmVzb3VyY2VUeXBlcy5pbmRleE9mKExheWVyUmVzb3VyY2VUeXBlcy5PU00pO1xuICAgIH0sXG5cbiAgICBnZXQgOiBmdW5jdGlvbihsYXllclNlcnZpY2UgPzogTGF5ZXJTZXJ2aWNlKSA6IFEuUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gUXVlcnlGYWN0b3J5KClcbiAgICAgICAgICAgIC5maWVsZHMoJyonKVxuICAgICAgICAgICAgLnJlc291cmNlVHlwZXMoTGF5ZXJSZXNvdXJjZVR5cGVzLk9TTSk7XG4gICAgICAgIGlmKCFsYXllclNlcnZpY2UpXG4gICAgICAgICAgICBsYXllclNlcnZpY2UgPSBuZXcgTGF5ZXJTZXJ2aWNlKENvbmZpZy51YWxVcmwsIG5ldyBYSFJIdHRwQ2xpZW50KCkpO1xuICAgICAgICByZXR1cm4gbGF5ZXJTZXJ2aWNlLnNlYXJjaChxdWVyeSlcbiAgICAgICAgLnRoZW4oIHJlc3BvbnNlID0+IHJlc3BvbnNlLnJlc3VsdHMubGVuZ3RoID8gcmVzcG9uc2UucmVzdWx0c1swXSA6IG51bGwpXG4gICAgICAgIC5jYXRjaCggZSA9PiBRLnJlamVjdChlKSk7XG4gICAgfVxuXG59O1xuIl19